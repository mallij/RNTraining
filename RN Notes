Day 1

JavaScript

1. Functions/Types of Functions
2. Var let & const
3. Data Types
4. Type Casting
5. JSON Objects
6. Typeof
7. Diff between undefined & null
8. == vs ===
9.  Arrays
10. Different ways to iterate over arrays - forEach, map & filter
11. Array Operations - shift, unShift, push & pop
12. SetInterval & setTimeOut
13. Asynchronous Operations
14. JavaScript Single Threaded model
15. Promise 
16. Async/Await


ECMA - 

ES5, ES6 , ES7…


Declaring / Creating Variables


3 keywords to create/declare variables

1. var - Can reassign the values, can redeclare the variable
2. const - Cannot re assign, cannot redeclare the variable
3. let - Can reassign the value, cannot redeclare the variable (loops) - is used in block specific access

Hoisting -  All the variable declarations are moved to the top of the scope before executing the code


Data Types

1. Number
2. String
3. Boolean
4. Array
5. Object
6. Null
7. Undefined
8. Command


Arrays :

forEach - Same as traditional for loop but don’t need to write boiler plate code

map() - we can apply some operation over each element of the array

Filter - can apply some condition over each element and can return the set/array of the elements that satisfies the given condition

Promise => A Description of task whose output/result is not know at that point of time 
		- A representation of an asynchronous operation


Asynchronous => Success / Failure 

Promise => Resolved / Rejected

fetch(URL)
.then((value) => {
// Then represents positive/ promise is resolved
    console.log(value);
  })
  .catch((err) => {
	// catch represents negative/ promise is rejected.
    console.error(err);
  });



React Native

1. Native - Android, iOS, etc
2. Hybrid - Can create applications that are compatible with more than on OS 
        1. Flutter
        2. Ionic
        3. PhoneGap/Cordova
        4. React Native

Android - iOS

Hello App

 <Text> Hello App <Text>

	Other Hybrid => convert the code into web content => loads the application with the help of a web view

	React Native => <Text> Hello App <Text>

	=> App is loaded => Android => <TextView> Hello App </TextView>

	=> App is loaded => iOS => <UILabel> Hello App </UILabel>



Day 2


Java latest version
Android Studio


Download iInstall

Node - https://nodejs.org/en/download/

After node installed, Open a terminal and run 

npm install react-native

Then run 

sudo gem install cocoapods

Once done,

Create a Workspace folder in finder

Open a new terminal and move to the workspace folder using cd commands


To Create a new RN project

npx react-native init <ProjectName> 


To install react native run the following command in Command Prompt/ terminal


npm install react-native 

npm i react-native


To Create a new RN project

npx react-native init <ProjectName> 

npx react-native run-ios  

npx react-native run-android  --no-jetifier


Windows Machine Users to Set up Android



Day 3

Hot Reloading -> Reloading only the modified content / file

Live Reloading -> Run the application / Reloading the application through the run command

User Interface in RN

Basic Building blocks of RN UI

Text - To print/ render labels / Strings - TextWrap

Button - to trigger an action

TouchableOpacity - Opacity changes when button is clicked
TouchableHighlight - highlights the component when clicked
TouchableWithoutFeedback - No changes will be exhibited when clicked

TextInput - Textbook in RN to take input from the user

Image - To render icons/images

View - it is container which defines the arrangement of the elements/components on the screen


——— Basic Building blocks ——— 


Alert - In built Popups = Predefined components whose look and feel can be modified

Modal - Popups - Can be customised

ScrollView - used to scroll through the content in vertical and horizontal manner
	- Loads all the elements/content at the time rendering

FlatList - Display list of items - renders/loads only the set of elements which are shown on the screen which is called lazy loading.

SectionList - Displays separate lists of items with headers (section name/title)

Pressable - Alternative for button


The content (variables declared inside the component) of any React component can be of two types

1. Normal content - The variables and objects that are created as we do in javascript functions. Whenever there is a change in this type of content, the component will not reload and always have the old values of these variable and objects.
2. State content - The variables and objects that are part of the component state. Whenever there is a change in this type of content, the component will reload and always have the latest values of these variable and objects.


Functional Vs Class Components

ErrorBoundary - can only be used in Class Components


Day 4
 export - if export is used to export a function/variable/class, it is called named export and we can export any number of components with just export statement.

While importing the names of the components are to be same as with which they are created/exported and should be enclosed within { }

export default - when ‘export default’ is used to export it is normal import and only one component can be exported from a file by using ‘export default’.

While importing the names of the components don’t need to be same as with which they are created/exported and should not be enclosed within { }

There are some features which are specific to Class components

	1) State
	2) Component Life Cycle
	3) Redux

In order make these class component features available in functional components, the concept of Hooks is introduced

	1) State : useState
	2) Component Life Cycle - useEffect
	3) Redux - useDispatch & useSelector
	4) useCallback => 
	5) useMemo
	6) useEffect vs useCallback vs useMemo
	


Day 5

Navigation - different types are there - Stack, Tab, Drawer

Install the following libraries

npm install react-native-screens react-native-safe-area-context 

npm  i @react-navigation/native


Stack Navigation - npm i @react-navigation/native-stack


Day 6 


TAB Navigation

npm install react-native-screens react-native-safe-area-context 

npm  i @react-navigation/native


npm install @react-navigation/bottom-tabs


Drawer Navigation

npm install react-native-screens react-native-safe-area-context 

npm  i @react-navigation/native


npm install @react-navigation/drawer

npm I  react-native-gesture-handler react-native-reanimated.



Redux - This is a concept of Application State / Global State - Common place where every component of the application
Can read or write data to it.

Store : (Application State) - This is the place where the data is stored - Plain JSON Object Representation

Reducer - It is a function that have direct access to the store to make modifications to the store data

Action - The change that has to be performed on the Store. It is a plain JSON Object that contains the ACTION Name (type) & input data (payload)

User will trigger/dispatch an action through the UI =>


useDispatch - to dispatch actions to the reducers
useSelector - to read the data from redux state/ redux store/ global state


Redux Libraries : redux and react-redux

Day 7

Redux in Class Component -

	mapStateToProps - Which is going to be used to read data from redux

	mapDispatchToProps - Which is used to dispatch actions / update redux

	connect - react-redux

Export default connect (mapStateToProps, mapDisptachToProps)(ComponentName)


Component Life Cycle:

componentWillMount() - Whenever the component is about to be loaded / to be shown on the screen for the first time, we say Component is going to mount

componentDidMount() - Whenever the component is loaded/shown on the screen for the first time, we say Component is mounted

componentDidUpdate() - Whenever there is a change in the state/props of the component of change in the redux data, we  say Component is updated

componentWillUnmount() - Whenever the current component is about to be removed from the stack (clicking back button) the we say component will be unmounted - Unmounting 

useEffect() - one of the hooks that can be used to make use of life cycle events if not used to manage different states of a component

(…) => spread operator can be used to

1. Used as a parameter to a function (rest operator)
2. Creating a copy of an object (JSON Object) 
	- Shallow Copy - When we create a copy of an object just by copying the reference
	- Deep Copy - is copy that will be created that includes the content/ it will be a new object
		- By using spread operator
		- by using assign function in Object



To Store the data to persistent storage, we can use some libraries like AyncStorage (Deprecated), EncrptedStorage to store the data in the form of key - value pairs

npm i react-native-encrypted-storage  

	Android - SharedPreferences
	iOS : KeyChain

Day 8 : 

Database Management using RealM - MongoDb

data types in realm 

bool, int, double, Decimal128, string, date, data, objectId

DataTypes of realm => 

- realm - npm i realm
    - Creating Database
    - Creating Tables
    - Insert, update, delete & select  


Two tables in realm can be related by referencing a column of other table

One to one

One to many

https://www.mongodb.com/docs/realm/sdk/react-native/fundamentals/relationships-and-embedded-objects/

Realm Studio is a tool to visualise data saved in relamdb file


Fragment : To bind multiple elements as a single entity while returning from a function or condition without adding an extra level in view hierarchy of the component

Debug Menu

iOS - Command + D
Android - control + M => ctrl + M

Join Tables with Primary key and foreign key -  https://www.mongodb.com/docs/realm/sdk/react-native/fundamentals/relationships-and-embedded-objects/#std-label-react-native-to-one-relationship


OS Specific Implementation

Platform -> Platform.os => {‘ios’ , ‘android’};

1. When some part of the screen has to be implemented according to OS
2. Loading completely two different components/screens one for each OS
3. Native Bridging => We write native android & iOS code and invoke/call that native code from React Native Code - https://reactnative.dev/docs/native-modules-android


Day 9

API/WebService - Calling => fetch, axios => Promise => Asynchronous operations

Promise - it represents an asynchronous operation => Success - Resolved / Failure = rejected

Promise.then((response) => Process Response => Show success message/output to the user)
	.error((error) => Show Error Message to the user)

fetch - inbuilt component

axios - third library

1. Fetch don’t parse the response automatically, but axios does
2. Cancel the API call in between / before it is completed is possible with axios but not with fetch


API Middleware 

npm install redux-thunk

Custom Fonts

1. Download the font definitions/ttf files : https://www.fontsquirrel.com/fonts/list/popular
2. Copy the ttf files in to your project
3. Create assets/fonts in your src and then add all font ttf files in it
4. Create a file name ‘react-native.config.js’ in the root folder
5. Copy the following content in the above created file

react-native.config.js

module.exports = {
    project: {
        ios: {},
        android: {}
    },
    assets: ['./src/assets/'],
};	

6. Now run  npx react-native-asset


<Text style={{fontFamily: 'Roboto', fontSize: 38}}>Wow Such Title</Text>


Day 10

Dropdown - react-native-element-dropdown
npm i react-native-element-dropdown

https://github.com/hoaphantn7604/react-native-element-dropdown

https://www.sitereq.com/post/3-steps-to-add-react-native-dropdown-list-to-your-project#:~:text=The%20three%20steps%20of%20adding,will%20render%20the%20drop%2Ddown

https://blog.logrocket.com/creating-custom-react-native-dropdown/



Styled Components

npm i styled-components  

https://www.npmjs.com/package/styled-components

Styled components can be used to create styled version of React native components for

1. View
2. Text
3. TouchableOpacity
4. Image
5. StyleSheet
6. ScrollView

———

UnitTesting

A component in RN can be of two types

1 - UI Component - Component that can render/draw something on the screen
2 - Utility component - Component that does render anything on the screen, but can take some input and should give some result back

Using jest testing framework (in-build testing library) we can test/write unit test scripts only for above two types of components
We cannot write scripts for the component that has some user inputs (Entering text in the text box, button click, etc) associated with it.

For such events to be tested, we can use @testing-library/react-native

npm i @testing-library/react-native 

1. Normal Util components
2. UI Component Render test (Snapshot)
3. Events Testing

A "component snapshot" is a JSX-like string created by a custom React serializer built into Jest. This serializer lets Jest translate React component trees to string that's human-readable.

A Snapshot is created when the component is created (Not when we make changes)

To write test cases related to a Component, if the component name is  MyComponent.js, then it’s related unit test script file has to be named as MyComponent.test.js

Once we are done with writing the test scripts, we have to run <npm test> from the root folder of our project 

Whenever the component is modified, we have to update the snapshot of that component, to update the snapshot run the command <npm test -- -u> from root folder of your project.

For test coverage run the command <npx jest --coverage> from the root folder of your project

https://jestjs.io/

https://callstack.github.io/react-native-testing-library/docs/api-queries

———

Date Picker

npm install react-native-date-picker



Splash Screen

npm i react-native-splash-screen

Android : 

1. Update MyApplication.java

	Add the following import int the top of MyApplication.java and 

	import org.devio.rn.splashscreen.SplashScreenReactPackage;
	import com.facebook.react.shell.MainReactPackage;
	import java.util.Arrays;

	replace the following code in the MyApplication.java for getPackages method

	@Override
	protected List<ReactPackage> getPackages() {
   	 return Arrays.<ReactPackage>asList(
            new MainReactPackage(),
            new SplashScreenReactPackage()  //here
   	 );
	}

2. Copy the following code in MainActivity.java
	
	Add the below import in MainActivity.java

	import android.os.Bundle;
	import org.devio.rn.splashscreen.SplashScreen;

protected void onCreate(Bundle savedInstanceState) {
        SplashScreen.show(this);  // here
        super.onCreate(savedInstanceState);
    }

3. Create a file called launch_screen.xml in app/src/main/res/layout and paste the following content in it
	<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:layout_centerInParent="true"
        android:src="@mipmap/ic_launcher"
        android:scaleType="centerCrop" />

</RelativeLayout>

4. In App.js or the first screen of your app, add the following code
	
	import SplashScreen from 'react-native-splash-screen'

	componentDidMount() {
    	// do stuff while splash screen is shown
        // After having done stuff (such as async tasks) hide the splash screen
        SplashScreen.hide();
    }


Configuring SplashScreen in iOS

1. Update AppDelegate.m with the following additions:

	#import "RNSplashScreen.h" // swift

	#import <RNSplashScreen.h> // Objective C
 
	@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // ...other code

    // or
    //[RNSplashScreen showSplash:@"LaunchScreen" inRootView:rootView];
	[RNSplashScreen show];  // Add this line in didFinishLaunchingOptions
    return YES;
}

Add this ‘[SplashScreen show]’ after the call to [self.window makeKeyAndVisible]; in the above method  ‘didFinishLaunchingWithOptions’

2. Customize your splash screen via LaunchScreen.storyboard or LaunchScreen.xib

Day 11
———-

Localisation

npm i react-native-localization

languageStrings.getInterfaceLanguage(); // To get the device language

languageStrings.setLanguage(lang code eg: hi, en, fr, the); // to change the language within the app

  
Day 12
———-

Assignment Part - 1

Day 13

Var, let, const

Var => A variable type, whose value can be modified any number of times, 

Variables declared using var keyword are Either Global, Function Scope but not of block scope

	- That means if a variable declared inside a function it is not accessible out side of that function
	- variables declared within a block (ex: if, else blocks) can be accessed from anywhere of the function in 	which the block is written.

const=> A variable type, whose value can not be modified once initialised
			- const variables to be declared and initialised in a single statement
			- const variables cannot be accessed until they are assigned a value
			- const type variables are of block scope

Let => A variable type, whose value can be modified any number of times
	=> let type variables are of block scope

Temporal dead zone => The Block of code in between the first statement of the program and the statement in which the const variable is declared and initialised, is called the temporal dead zone of that const variable

If a variable is created without using any of the three keywords var, let & const, then that variable becomes a global variable and JS assumes var is used to create that variable and that variable can be accessed from anywhere of the code/scope

————

** typeof => can be used to know the data type of a variable


Regular Programming Languages (C, C++, Java, etc) - Write the Code => Compiled => Success => Execute

JIT - Just in Time Compilation => Compilation will be done at the time of execution


Javascript Data Types - 8 data types

- The JS code will be compiled at the time execution
	- Data types in JS are dynamic => Data type of a particular variable is decided at runtime

=> primitive data types - boolean, number, string, null, undefined, 
=> Object based data types - object, Array, Symbol => Used to generate unique values


- Boolean => true / false = 1/0 => the possible values to a Boolean variable are true/false

- Number => variables of type Number are used to hold numeric values (whole numbers & decimal numbers)
	- To Convert a number of one type to another (ex: integers to decimal or vice versa), we can use Math object
		in which we have different methods like ceil, floor, trunk, round, etc

https://www.w3schools.com/js/js_math.asp

- String => set of characters and they should be enclosed within qoutes (single, double and backtick)
		- String can be primitive types or we can create them as objects
		- It is advised to use primitive notation for using string
		- String functions can be used to perform different operations on String variables


https://www.w3schools.com/jsref/jsref_obj_string.asp
	
=> undefined => if the information like variable data type or value is not known (not even null) - it’s value and 
		data type is also undefined

=> null => whenever null is assigned as a value to some variable, that variable data type is an object and it has a value of null (nothing)

=> Object => is a set of key value pairs embedded inside a pair of curly braces { } - JSON Object Notation

Example : 
		var obj = {name: 'Ram', age: 30, address: 'Hyderabad'};

To access properties of an obj we can use 

either obj[‘propertyname’] 

or obj.propertyName

To check if a particular property is there in an object or not we have three ways,

1. Obj.hasOwnProperty(‘propertyName’)
2. In operator => ‘propertName’ in obj
3. By comparing the value with undefined => if a property value is undefined, that means that property is not there in that object

https://www.w3schools.com/js/js_objects.asp

Arrays :

To iterate through an array, we have several methods

1. Normal for loop
2. forEach()
3. map()
4. filter() 

for(let i = 0; i < 5; ++i){
    setTimeout(() => {
        console.log(i);
    }, 2000);
}

// for(var i = 0; i < 5; ++i){
//     setTimeout(() => {
//         console.log(i);
//     }, 2000);
// }

Symbol => used generate some random unique values

Symbol is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that's guaranteed to be unique.

Collections => Map & Set

In Javascript Collections are of two types

1. Index Based Collections => Arrays, Strings, Set
2. Key Based Collections => Map

Set => is used to represent a list of unique elements

var set = new Set(); 

set.add(element-can be any data type) 
Set.delete(element) // to delete an element in the set

Even if we try to add an element that is already there in the set, it will simply ignores and keeps the existing copy of that element in the same postion


To iterate over a Set we can use forEach();

Map => is used to store data in the form of key value pairs.

Key should be of string type and value can be of any type

var map = new Map()

To add a key value pair to a Map, map.set(key, value); 
To get all the keys in a map => map.keys (an iterator)

map.keys.next.value => the value that is associate with a particular key

To iterate over a Map we can use forEach();



Day 14

Runtime Permissions => In order to use the features/services of the device/system, we will need to mention
		all the permission names in configuration file.

Reading Location info = Feature is available in the device/system.
SMS => Read SMS info => 
Bluetooth => 


Android 5.0 or lower => The Permission were granted bye the system if it is requested by the app (it is mentioned in the configuration - AndroidManifest.xml)

Android 5.0 or lower => The Permission were granted bye the system if it is requested by the app (it is mentioned in the configuration - AndroidManifest.xml)


iOS => info.plist is the configuration file 


Android 6.0 & above => App has to ask the user to give permission to access a particular feature of the device

	For Example if App want to read the location information, using device location feature, whenever that location feature is to be used in the app for the first time, system will ask the user to allow the app to access the location of your device or not.


Features and their respective permissions are divided in to two groups

1. Normal Features/permissions => Permission that will allow the app to access common data/info
	- Ex : The data that is not sensitive/confidential, Phone Info like model, brand, OS name, etc.

	Ex: Internet, 

1. Dangerous Features/permissions => Permissions that are going to allow the app to read sensitive or personal data from the device

	Ex: Contacts Data, Photos, Call Log, Location, SMS, etc.

Only Dangerous permissions are to be allowed/approved by the user of the app.

	If user doesn’t allow a particular permission, that feature can not be used by the App.

Permissions are handled differently in Android & iOS.


There is a direct API/Component available in React native to handle Runtime permissions in Android

	- PermissionsAndroid

https://reactnative.dev/docs/permissionsandroid


To read location details from the device install react-native-get-location

npm i react-native-get-location


To Integrate Google Maps => npm i react-native-maps


To make use of google maps, we have to generate an API_KEY with the help developer console

Go to https://console.cloud.google.com/ and login with gmail credentials

Create a cloud project => New Project => Give a name to that Project

Once the project is created, 

- Move to the page ‘APIs & Services’ => Enabled Apis & Services using the navigation beside the project name
- Enable the Billing Services Account
- Enable the APIs named ‘Maps SDK for Android’ && ‘Maps SDK for iOS’
- Once the APIs are enabled, go to ‘Credentials’ screen using Menu
- Click on ‘Create Credentials’ and select API Key
- Copy the API Key that is created in the above step and paste it in 
    -  AndroidManifest.xml for Android inside the application tag

		<meta-data 
        android:name="com.google.android.geo.API_KEY"
        android:value="AIzaSyBzrEz9rwuGYzACzsAM1BwuwlsjvfkDdkQ"/>


Publishing the App

In Android we have two build formats in which an app can be shared

1. Apk. => Android Application package => For Testing purpose => we can download and install apk file to check/test the app
2. aab => Android Application Bundle => Format used to publish app in the playstore

APK => Contains all the code/files/images/content that is placed as part of that project

	=> This content may be related to different device specifications

AAB => include the content/files/data that is suitable with the device category in which it is going to be installed

To Publish an app in play store

	=> Developer Account

	=> Signed .aab

	=> Icon

	=> 3,4 screenshots

	=> Policies => Disclaimer

Publish an iOS App

=> Apple Account => to be registered in app.com

=> A Project will be created in developer.app.com

=> Project Owner/admin will add us/our apple account to that project as a developer

=> As a next step, project owner will create certificates that are to be configured to be key chain / Xcode

=> Once the build is generated using Xcode we can upload it to test flight

=> Once The app is found working as expected, the build can be pushed to App Store





